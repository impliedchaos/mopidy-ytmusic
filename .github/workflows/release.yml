name: Create Release & Publish

on:
  workflow_dispatch:
    inputs:
      relVersion:
        description: 'Increment `patch`, `minor`, or `major` version, or specify semver manually.'
        required: true
        default: 'patch'
      relNotes:
        description: 'General comment about this release that will appear in the commit logs and release message.'
        required: false

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # We want the full repo, so we can parse the log and update our CHANGELOG.rst
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        # install hub so we can create a GitHub release easily.
        sudo apt-get update && sudo apt-get install hub
        # install poetry
        curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
        echo "$HOME/.poetry/bin" >> $GITHUB_PATH
        PATH="$HOME/.poetry/bin:$PATH"
        # install our dependencies and update our poetry.lock file
        poetry update
        # Configure git user.
        git config user.name "github-actions"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
    - name: Increment version
      run: |
        # Get the previous version.
        prev=$(poetry version | awk '{print $2}')
        # Set the new version.
        poetry version ${{ github.event.inputs.relVersion }}
        # Get the current version.
        rel=$(poetry version | awk '{print $2}')
        # save env for later steps
        echo -e "prev=$prev\nrel=$rel" >> $GITHUB_ENV
    - name: Generate requirements.txt
      run: poetry run poetry2setup > setup.py && poetry export -f requirements.txt --output requirements.txt
    - name: Black & isort
      run: poetry run black . && poetry run isort .
    - name: Update CHANGELOG.rst
      run: |
        # Create the version line.
        echo -e "\nv${rel}\n========================================\n" > /tmp/release.txt
        # Commits since last revision.
        git log v${prev}..HEAD --oneline | sed -E 's/^\w+/-/' >> /tmp/release.txt
        sed -i '3r /tmp/release.txt' CHANGELOG.rst   # Insert after the 3rd line.
        sed -i '1d; 3d' /tmp/release.txt   # Removes the 1st and 3rd lines (RST formatting) for use in GH release.
    - name: Release notes.
      if: ${{ github.even.inputs.relNotes != '' }}
      run: |
        echo -e "${{ github.event.inputs.relNotes }}\n\nChanges:\n--------\n" > /tmp/relnote
        sed -i '2r /tmp/relnote' /tmp/release.txt
    - name: Build
      run: poetry build
    - name: Publish to PYPI
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
      run: test -n "$POETRY_PYPI_TOKEN_PYPI" && poetry publish || echo "Skipping... No PYPI API token defined."
    - name: Commit Changes
      run: git add . && git commit -m "v${rel}" && git push
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: hub release create -F /tmp/release.txt -a dist/Mopidy-YTMusic-${rel}.tar.gz -a dist/Mopidy_YTMusic-${rel}-py3-none-any.whl v${rel}
